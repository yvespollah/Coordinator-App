
"""
Django settings for coordinator_project project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@tjxa*z5ko6raxm0re8vuo6e(6^6wm#po$pok(u1=w4b-#y6(z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'volunteer',
    'manager',
    'communication',
    'redis_communication.apps.RedisCommunicationConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://localhost:3000',
    'http://127.0.0.1:5173',
    'http://127.0.0.1:3000',
]

# Allow all methods (GET, POST, etc.) for CORS requests
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow all headers in requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ROOT_URLCONF = 'coordinator_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Channels config
ASGI_APPLICATION = 'coordinator_project.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis settings for consumers.py
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6380
REDIS_DB = 0

# Redis proxy settings
REDIS_PROXY_HOST = 'localhost'
REDIS_PORT_FOR_PROXY = 6379
REDIS_PROXY_PORT = 6380
REDIS_PROXY_DB = 0
USE_REDIS_PROXY = True  

# Redis for channel layers (message broker)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_PROXY_HOST if USE_REDIS_PROXY else REDIS_HOST, REDIS_PROXY_PORT if USE_REDIS_PROXY else REDIS_PORT)],
        },
    },
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# MongoDB settings
# Configuration des paramètres de base
MONGODB_HOST = 'localhost'
MONGODB_PORT = 27017
MONGODB_NAME = 'coordinator_db'
MONGODB_USERNAME = ''
MONGODB_PASSWORD = ''

# Construction de la chaîne de connexion URI
# Format: mongodb://[username:password@]host[:port]/database
if MONGODB_USERNAME and MONGODB_PASSWORD:
    MONGODB_URI = f"mongodb://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_HOST}:{MONGODB_PORT}/{MONGODB_NAME}"
else:
    MONGODB_URI = f"mongodb://{MONGODB_HOST}:{MONGODB_PORT}/{MONGODB_NAME}"

# Options de connexion pour améliorer la fiabilité
MONGODB_CONNECT_OPTIONS = {
    'connectTimeoutMS': 5000,  # 5 secondes de timeout pour la connexion
    'socketTimeoutMS': 30000,  # 30 secondes de timeout pour les opérations
    'serverSelectionTimeoutMS': 5000,  # 5 secondes pour la sélection du serveur
    'maxPoolSize': 10,  # Nombre maximum de connexions dans le pool
    'minPoolSize': 1,  # Nombre minimum de connexions dans le pool
    'maxIdleTimeMS': 30000,  # Temps maximum d'inactivité d'une connexion
    'retryWrites': True,  # Réessayer les opérations d'écriture en cas d'échec
    'w': 'majority',  # Attendre la confirmation d'écriture de la majorité des réplicas
}

# Connexion à MongoDB avec mongoengine
import mongoengine
try:
    # Utilisation de la chaîne de connexion URI avec les options
    mongoengine.connect(
        host=MONGODB_URI,
        **MONGODB_CONNECT_OPTIONS
    )
    print(f"Connexion à MongoDB établie avec succès: {MONGODB_URI}")
except Exception as e:
    print(f"Erreur de connexion à MongoDB: {e}")
    # En cas d'erreur, on continue quand même l'exécution
    # Les gestionnaires ont été modifiés pour fonctionner même sans MongoDB